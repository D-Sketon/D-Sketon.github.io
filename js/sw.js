let cacheDomain=["fonts.googleapis.com","npm.webcache.cn","unpkg.com","fastly.jsdelivr.net","cdn.jsdelivr.net"];async function cacheRequest(e,t){try{var s=await fetch(e),n=await caches.open(VERSION);return/^https?:$/i.test(new URL(e.url).protocol)&&n.put(e,s.clone()),s}catch{let c=await fetch(e,t),a=await caches.open(VERSION);return/^https?:$/i.test(new URL(e.url).protocol)&&a.put(e,c.clone()),c}}async function respondRequest(e,t){return await caches.match(e)||cacheRequest(e,t)}self.addEventListener("install",e=>{console.log(`Service Worker ${VERSION} installing.`),e.waitUntil(caches.open(VERSION).then(t=>t.addAll(preCache)))}),self.addEventListener("fetch",e=>{var t=new URL(e.request.url);if(cacheDomain.includes(t.hostname))e.respondWith(respondRequest(e.request));else if(e.request.method==="POST"||e.request.method==="GET"&&t.search)try{e.respondWith(fetch(e.request))}catch{e.respondWith(fetch(e.request,{mode:"no-cors"}))}else e.respondWith(respondRequest(e.request,{mode:"no-cors"}))}),self.addEventListener("activate",e=>{e.waitUntil(caches.keys().then(t=>Promise.all(t.map(s=>{if(VERSION!==s)return console.log("Service Worker: deleting old cache "+s),caches.delete(s)})))),console.log(`Service Worker ${VERSION} activated.`)}),self.addEventListener("message",e=>{console.log("Service Worker: message received"),e.data==="skipWaiting"&&self.skipWaiting()});
